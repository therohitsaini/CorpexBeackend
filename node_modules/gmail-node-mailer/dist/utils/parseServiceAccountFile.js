"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseServiceAccountFile = void 0;
const path = __importStar(require("path"));
const fs_1 = require("fs");
/**
 * Checks if the provided error object has a `code` property.
 * @param {any} error - The error object to check.
 * @returns {boolean} - True if the error has a `code` property, false otherwise.
 */
function hasErrorCode(error) {
    return 'code' in error;
}
/**
 * Asynchronously parses a service account file and validates its content.
 *
 * @param {Object} params - Parameters for parsing the service account file.
 * @param {string} params.filePath - The file path of the service account JSON file.
 * @returns {Promise<{status: boolean, serviceAccount: IGmailServiceAccount | undefined, message: string}>}
 *          The result of parsing the service account file, including status, the service account object (if successful), and a message.
 */
function parseServiceAccountFile(_a) {
    return __awaiter(this, arguments, void 0, function* ({ filePath }) {
        try {
            const absolutePath = path.resolve(filePath);
            const fileContents = yield fs_1.promises.readFile(absolutePath, 'utf-8');
            const parsedAccount = JSON.parse(fileContents);
            if (!parsedAccount.private_key || !parsedAccount.client_email) {
                return {
                    status: false,
                    serviceAccount: undefined,
                    message: `The service account file at '${filePath}' lacks required 'private_key' or 'client_email' fields.`
                };
            }
            return {
                status: true,
                serviceAccount: parsedAccount,
                message: `Successfully loaded service account for '${parsedAccount.client_email}' from '${filePath}'.`
            };
        }
        catch (error) {
            let errorMessage = 'An error occurred while parsing the service account file.';
            if (hasErrorCode(error) && error.code === 'ENOENT') {
                errorMessage = `File not found at provided path: '${filePath}'.`;
            }
            else if (error instanceof SyntaxError) {
                errorMessage = `Service account file at '${filePath}' contains invalid JSON.`;
            }
            else {
                errorMessage += ` Error: ${error.message}`;
            }
            return {
                status: false,
                serviceAccount: undefined,
                message: errorMessage
            };
        }
    });
}
exports.parseServiceAccountFile = parseServiceAccountFile;
